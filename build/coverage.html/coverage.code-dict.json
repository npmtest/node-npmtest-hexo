{"/home/travis/build/npmtest/node-npmtest-hexo/test.js":"/* istanbul instrument in package npmtest_hexo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hexo/lib.npmtest_hexo.js":"/* istanbul instrument in package npmtest_hexo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hexo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hexo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hexo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hexo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hexo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hexo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hexo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_hexo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hexo.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_hexo.__dirname +\n                    '/lib.npmtest_hexo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/hexo/index.js":"'use strict';\n\nvar Promise = require('bluebird');\nvar pathFn = require('path');\nvar tildify = require('tildify');\nvar Database = require('warehouse');\nvar _ = require('lodash');\nvar chalk = require('chalk');\nvar EventEmitter = require('events').EventEmitter;\nvar fs = require('hexo-fs');\nvar Module = require('module');\nvar vm = require('vm');\nvar pkg = require('../../package.json');\nvar logger = require('hexo-log');\nvar extend = require('../extend');\nvar Render = require('./render');\nvar registerModels = require('./register_models');\nvar Post = require('./post');\nvar Scaffold = require('./scaffold');\nvar Source = require('./source');\nvar Router = require('./router');\nvar Theme = require('../theme');\nvar Locals = require('./locals');\nvar defaultConfig = require('./default_config');\nvar loadDatabase = require('./load_database');\n\nvar libDir = pathFn.dirname(__dirname);\nvar sep = pathFn.sep;\nvar dbVersion = 1;\n\nfunction Hexo(base, args) {\n  base = base || process.cwd();\n  args = args || {};\n\n  EventEmitter.call(this);\n\n  this.base_dir = base + sep;\n  this.public_dir = pathFn.join(base, 'public') + sep;\n  this.source_dir = pathFn.join(base, 'source') + sep;\n  this.plugin_dir = pathFn.join(base, 'node_modules') + sep;\n  this.script_dir = pathFn.join(base, 'scripts') + sep;\n  this.scaffold_dir = pathFn.join(base, 'scaffolds') + sep;\n  this.theme_dir = pathFn.join(base, 'themes', defaultConfig.theme) + sep;\n  this.theme_script_dir = pathFn.join(this.theme_dir, 'scripts') + sep;\n\n  this.env = {\n    args: args,\n    debug: Boolean(args.debug),\n    safe: Boolean(args.safe),\n    silent: Boolean(args.silent),\n    env: process.env.NODE_ENV || 'development',\n    version: pkg.version,\n    init: false\n  };\n\n  var multiConfigPath = require('./multi_config_path')(this);\n  this.config_path = args.config ? multiConfigPath(base, args.config)\n                                 : pathFn.join(base, '_config.yml');\n\n  this.extend = {\n    console: new extend.Console(),\n    deployer: new extend.Deployer(),\n    filter: new extend.Filter(),\n    generator: new extend.Generator(),\n    helper: new extend.Helper(),\n    migrator: new extend.Migrator(),\n    processor: new extend.Processor(),\n    renderer: new extend.Renderer(),\n    tag: new extend.Tag()\n  };\n\n  this.config = _.cloneDeep(defaultConfig);\n\n  this.log = logger(this.env);\n\n  this.render = new Render(this);\n\n  this.route = new Router();\n\n  this.post = new Post(this);\n\n  this.scaffold = new Scaffold(this);\n\n  this._dbLoaded = false;\n\n  this._isGenerating = false;\n\n  this.database = new Database({\n    version: dbVersion,\n    path: pathFn.join(base, 'db.json')\n  });\n\n  registerModels(this);\n\n  this.source = new Source(this);\n  this.theme = new Theme(this);\n  this.locals = new Locals(this);\n  this._bindLocals();\n}\n\nrequire('util').inherits(Hexo, EventEmitter);\n\nHexo.prototype._bindLocals = function() {\n  var db = this.database;\n  var locals = this.locals;\n  var self = this;\n\n  locals.set('posts', function() {\n    var query = {};\n\n    if (!self.config.future) {\n      query.date = {$lte: Date.now()};\n    }\n\n    if (!self._showDrafts()) {\n      query.published = true;\n    }\n\n    return db.model('Post').find(query);\n  });\n\n  locals.set('pages', function() {\n    var query = {};\n\n    if (!self.config.future) {\n      query.date = {$lte: Date.now()};\n    }\n\n    return db.model('Page').find(query);\n  });\n\n  locals.set('categories', function() {\n    return db.model('Category');\n  });\n\n  locals.set('tags', function() {\n    return db.model('Tag');\n  });\n\n  locals.set('data', function() {\n    var obj = {};\n\n    db.model('Data').forEach(function(data) {\n      obj[data._id] = data.data;\n    });\n\n    return obj;\n  });\n};\n\nHexo.prototype.init = function() {\n  var self = this;\n\n  this.log.debug('Hexo version: %s', chalk.magenta(this.version));\n  this.log.debug('Working directory: %s', chalk.magenta(tildify(this.base_dir)));\n\n  // Load internal plugins\n  require('../plugins/console')(this);\n  require('../plugins/filter')(this);\n  require('../plugins/generator')(this);\n  require('../plugins/helper')(this);\n  require('../plugins/processor')(this);\n  require('../plugins/renderer')(this);\n  require('../plugins/tag')(this);\n\n  // Load config\n  return Promise.each([\n    'update_package', // Update package.json\n    'load_config', // Load config\n    'load_plugins' // Load external plugins & scripts\n  ], function(name) {\n    return require('./' + name)(self);\n  }).then(function() {\n    return self.execFilter('after_init', null, {context: self});\n  }).then(function() {\n    // Ready to go!\n    self.emit('ready');\n  });\n};\n\nHexo.prototype.call = function(name, args, callback) {\n  if (!callback && typeof args === 'function') {\n    callback = args;\n    args = {};\n  }\n\n  var self = this;\n\n  return new Promise(function(resolve, reject) {\n    var c = self.extend.console.get(name);\n\n    if (c) {\n      c.call(self, args).then(resolve, reject);\n    } else {\n      reject(new Error('Console `' + name + '` has not been registered yet!'));\n    }\n  }).asCallback(callback);\n};\n\nHexo.prototype.model = function(name, schema) {\n  return this.database.model(name, schema);\n};\n\nHexo.prototype.loadPlugin = function(path, callback) {\n  var self = this;\n\n  return fs.readFile(path).then(function(script) {\n    // Based on: https://github.com/joyent/node/blob/v0.10.33/src/node.js#L516\n    var module = new Module(path);\n    module.filename = path;\n    module.paths = Module._nodeModulePaths(path);\n\n    function require(path) {\n      return module.require(path);\n    }\n\n    require.resolve = function(request) {\n      return Module._resolveFilename(request, module);\n    };\n\n    require.main = process.mainModule;\n    require.extensions = Module._extensions;\n    require.cache = Module._cache;\n\n    script = '(function(exports, require, module, __filename, __dirname, hexo){' +\n      script + '});';\n\n    var fn = vm.runInThisContext(script, path);\n\n    return fn(module.exports, require, module, path, pathFn.dirname(path), self);\n  }).asCallback(callback);\n};\n\nHexo.prototype._showDrafts = function() {\n  var args = this.env.args;\n  return args.draft || args.drafts || this.config.render_drafts;\n};\n\nHexo.prototype.load = function(callback) {\n  var self = this;\n\n  return loadDatabase(this).then(function() {\n    self.log.info('Start processing');\n\n    return Promise.all([\n      self.source.process(),\n      self.theme.process()\n    ]);\n  }).then(function() {\n    return self._generate({cache: true});\n  }).asCallback(callback);\n};\n\nHexo.prototype.watch = function(callback) {\n  var self = this;\n\n  this._watchBox = _.debounce(function() {\n    return self._generate({cache: false});\n  }, 100);\n\n  return loadDatabase(this).then(function() {\n    self.log.info('Start processing');\n\n    return Promise.all([\n      self.source.watch(),\n      self.theme.watch()\n    ]);\n  }).then(function() {\n    self.source.on('processAfter', self._watchBox);\n    self.theme.on('processAfter', self._watchBox);\n\n    return self._generate({cache: false});\n  }).asCallback(callback);\n};\n\nHexo.prototype.unwatch = function() {\n  if (this._watchBox != null) {\n    this.source.removeListener('processAfter', this._watchBox);\n    this.theme.removeListener('processAfter', this._watchBox);\n\n    this._watchBox = null;\n  }\n\n  stopWatcher(this.source);\n  stopWatcher(this.theme);\n};\n\nfunction stopWatcher(box) {\n  if (box.isWatching()) box.unwatch();\n}\n\nHexo.prototype._generate = function(options) {\n  if (this._isGenerating) return;\n\n  options = options || {};\n  this._isGenerating = true;\n\n  var config = this.config;\n  var generators = this.extend.generator.list();\n  var route = this.route;\n  var keys = Object.keys(generators);\n  var self = this;\n  var routeList = route.list();\n  var log = this.log;\n  var theme = this.theme;\n  var newRouteList = [];\n  var siteLocals = {};\n\n  this.emit('generateBefore');\n\n  function Locals(path, locals) {\n    this.page = typeof locals === 'object' ? locals : {};\n    if (this.page.path == null) this.page.path = path;\n\n    this.path = path;\n    this.url = config.url + '/' + path;\n  }\n\n  Locals.prototype.config = config;\n  Locals.prototype.theme = _.assign({}, config, theme.config, config.theme_config);\n  Locals.prototype._ = _;\n  Locals.prototype.layout = 'layout';\n  Locals.prototype.cache = options.cache;\n  Locals.prototype.env = this.env;\n  Locals.prototype.view_dir = pathFn.join(this.theme_dir, 'layout') + sep;\n\n  // Run before_generate filters\n  return this.execFilter('before_generate', self.locals.get('data'), {context: this})\n  .then(function() {\n    self.locals.invalidate();\n    siteLocals = self.locals.toObject();\n    Locals.prototype.site = siteLocals;\n\n    // Run generators\n    return Promise.map(keys, function(key) {\n      var generator = generators[key];\n\n      return generator.call(self, siteLocals).then(function(data) {\n        log.debug('Generator: %s', chalk.magenta(key));\n        return data;\n      });\n    }).reduce(function(result, data) {\n      return data ? result.concat(data) : result;\n    }, []);\n  })\n  // Add routes\n  .map(function(item) {\n    if (typeof item !== 'object' || item.path == null) return;\n\n    var path = route.format(item.path);\n    var data = item.data;\n    var layout = item.layout;\n\n    newRouteList.push(path);\n\n    if (!layout) {\n      return route.set(path, data);\n    }\n\n    if (Array.isArray(layout)) {\n      layout = _.uniq(layout);\n    } else {\n      layout = [layout];\n    }\n\n    var locals = new Locals(path, data);\n    var layoutLength = layout.length;\n    var cache;\n\n    function saveCache(result) {\n      cache = result;\n      return result;\n    }\n\n    return self.execFilter('template_locals', locals, {context: self})\n    .then(function(locals) {\n      route.set(path, function() {\n        if (options.cache && cache != null) return cache;\n\n        var view, name;\n\n        for (var i = 0; i < layoutLength; i++) {\n          name = layout[i];\n          view = theme.getView(name);\n\n          if (view) {\n            log.debug('Rendering %s: %s', name, chalk.magenta(path));\n            return view.render(locals).then(saveCache);\n          }\n        }\n\n        log.warn('No layout: %s', chalk.magenta(path));\n      });\n    });\n  }).then(function() {\n    // Remove old routes\n    var removed = _.difference(routeList, newRouteList);\n\n    for (var i = 0, len = removed.length; i < len; i++) {\n      route.remove(removed[i]);\n    }\n\n    routeList.length = 0;\n    newRouteList.length = 0;\n\n    self.emit('generateAfter');\n\n    // Run after_generate filters\n    return self.execFilter('after_generate', null, {context: self});\n  }).finally(function() {\n    self._isGenerating = false;\n  });\n};\n\nHexo.prototype.exit = function(err) {\n  var self = this;\n\n  if (err) {\n    this.log.fatal(\n      {err: err},\n      'Something\\'s wrong. Maybe you can find the solution here: %s',\n      chalk.underline('http://hexo.io/docs/troubleshooting.html')\n    );\n  }\n\n  return this.execFilter('before_exit', null, {context: this}).then(function() {\n    self.emit('exit', err);\n  });\n};\n\nHexo.prototype.execFilter = function(type, data, options) {\n  return this.extend.filter.exec(type, data, options);\n};\n\nHexo.prototype.execFilterSync = function(type, data, options) {\n  return this.extend.filter.execSync(type, data, options);\n};\n\nHexo.lib_dir = Hexo.prototype.lib_dir = libDir + sep;\n\nHexo.core_dir = Hexo.prototype.core_dir = pathFn.dirname(libDir) + sep;\n\nHexo.version = Hexo.prototype.version = pkg.version;\n\nmodule.exports = Hexo;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/extend/index.js":"'use strict';\n\nexports.Console = require('./console');\nexports.Deployer = require('./deployer');\nexports.Filter = require('./filter');\nexports.Generator = require('./generator');\nexports.Helper = require('./helper');\nexports.Migrator = require('./migrator');\nexports.Processor = require('./processor');\nexports.Renderer = require('./renderer');\nexports.Tag = require('./tag');\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/extend/console.js":"'use strict';\n\nvar Promise = require('bluebird');\nvar abbrev = require('abbrev');\n\nfunction Console() {\n  this.store = {};\n  this.alias = {};\n}\n\nConsole.prototype.get = function(name) {\n  name = name.toLowerCase();\n  return this.store[this.alias[name]];\n};\n\nConsole.prototype.list = function() {\n  return this.store;\n};\n\nConsole.prototype.register = function(name, desc, options, fn) {\n  if (!name) throw new TypeError('name is required');\n\n  if (!fn) {\n    if (options) {\n      if (typeof options === 'function') {\n        fn = options;\n\n        if (typeof desc === 'object') { // name, options, fn\n          options = desc;\n          desc = '';\n        } else { // name, desc, fn\n          options = {};\n        }\n      } else {\n        throw new TypeError('fn must be a function');\n      }\n    } else {\n      // name, fn\n      if (typeof desc === 'function') {\n        fn = desc;\n        options = {};\n        desc = '';\n      } else {\n        throw new TypeError('fn must be a function');\n      }\n    }\n  }\n\n  if (fn.length > 1) {\n    fn = Promise.promisify(fn);\n  } else {\n    fn = Promise.method(fn);\n  }\n\n  var c = this.store[name.toLowerCase()] = fn;\n  c.options = options;\n  c.desc = desc;\n\n  this.alias = abbrev(Object.keys(this.store));\n};\n\nmodule.exports = Console;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/extend/deployer.js":"'use strict';\n\nvar Promise = require('bluebird');\n\nfunction Deployer() {\n  this.store = {};\n}\n\nDeployer.prototype.list = function() {\n  return this.store;\n};\n\nDeployer.prototype.get = function(name) {\n  return this.store[name];\n};\n\nDeployer.prototype.register = function(name, fn) {\n  if (!name) throw new TypeError('name is required');\n  if (typeof fn !== 'function') throw new TypeError('fn must be a function');\n\n  if (fn.length > 1) {\n    fn = Promise.promisify(fn);\n  } else {\n    fn = Promise.method(fn);\n  }\n\n  this.store[name] = fn;\n};\n\nmodule.exports = Deployer;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/extend/filter.js":"'use strict';\n\nvar Promise = require('bluebird');\n\nvar typeAlias = {\n  pre: 'before_post_render',\n  post: 'after_post_render'\n};\n\nfunction Filter() {\n  this.store = {};\n}\n\nFilter.prototype.list = function(type) {\n  if (!type) return this.store;\n  return this.store[type] || [];\n};\n\nFilter.prototype.register = function(type, fn, priority) {\n  if (!priority) {\n    if (typeof type === 'function') {\n      priority = fn;\n      fn = type;\n      type = 'after_post_render';\n    }\n  }\n\n  if (typeof fn !== 'function') throw new TypeError('fn must be a function');\n\n  type = typeAlias[type] || type;\n  priority = priority == null ? 10 : priority;\n\n  var store = this.store[type] = this.store[type] || [];\n\n  fn.priority = priority;\n  store.push(fn);\n\n  store.sort(function(a, b) {\n    return a.priority - b.priority;\n  });\n};\n\nFilter.prototype.unregister = function(type, fn) {\n  if (!type) throw new TypeError('type is required');\n  if (typeof fn !== 'function') throw new TypeError('fn must be a function');\n\n  var list = this.list(type);\n  if (!list || !list.length) return;\n\n  for (var i = 0, len = list.length; i < len; i++) {\n    if (list[i] === fn) {\n      list.splice(i, 1);\n      break;\n    }\n  }\n};\n\nFilter.prototype.exec = function(type, data, options) {\n  options = options || {};\n\n  var filters = this.list(type);\n  var ctx = options.context;\n  var args = options.args || [];\n\n  args.unshift(data);\n\n  return Promise.each(filters, function(filter) {\n    return Promise.method(filter).apply(ctx, args).then(function(result) {\n      args[0] = result == null ? data : result;\n      return args[0];\n    });\n  }).then(function() {\n    return args[0];\n  });\n};\n\nFilter.prototype.execSync = function(type, data, options) {\n  options = options || {};\n\n  var filters = this.list(type);\n  var ctx = options.context;\n  var args = options.args || [];\n  var result;\n\n  args.unshift(data);\n\n  for (var i = 0, len = filters.length; i < len; i++) {\n    result = filters[i].apply(ctx, args);\n    args[0] = result == null ? data : result;\n  }\n\n  return args[0];\n};\n\nmodule.exports = Filter;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/extend/generator.js":"'use strict';\n\nvar Promise = require('bluebird');\n\nfunction Generator() {\n  this.id = 0;\n  this.store = {};\n}\n\nGenerator.prototype.list = function() {\n  return this.store;\n};\n\nGenerator.prototype.get = function(name) {\n  return this.store[name];\n};\n\nGenerator.prototype.register = function(name, fn) {\n  if (!fn) {\n    if (typeof name === 'function') {\n      fn = name;\n      name = 'generator-' + this.id++;\n    } else {\n      throw new TypeError('fn must be a function');\n    }\n  }\n\n  if (fn.length > 1) fn = Promise.promisify(fn);\n  this.store[name] = Promise.method(fn);\n};\n\nmodule.exports = Generator;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/extend/helper.js":"'use strict';\n\nfunction Helper() {\n  this.store = {};\n}\n\nHelper.prototype.list = function() {\n  return this.store;\n};\n\nHelper.prototype.get = function(name) {\n  return this.store[name];\n};\n\nHelper.prototype.register = function(name, fn) {\n  if (!name) throw new TypeError('name is required');\n  if (typeof fn !== 'function') throw new TypeError('fn must be a function');\n\n  this.store[name] = fn;\n};\n\nmodule.exports = Helper;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/extend/migrator.js":"'use strict';\n\nvar Promise = require('bluebird');\n\nfunction Migrator() {\n  this.store = {};\n}\n\nMigrator.prototype.list = function() {\n  return this.store;\n};\n\nMigrator.prototype.get = function(name) {\n  return this.store[name];\n};\n\nMigrator.prototype.register = function(name, fn) {\n  if (!name) throw new TypeError('name is required');\n  if (typeof fn !== 'function') throw new TypeError('fn must be a function');\n\n  if (fn.length > 1) {\n    fn = Promise.promisify(fn);\n  } else {\n    fn = Promise.method(fn);\n  }\n\n  this.store[name] = fn;\n};\n\nmodule.exports = Migrator;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/extend/processor.js":"'use strict';\n\nvar Promise = require('bluebird');\nvar Pattern = require('hexo-util').Pattern;\n\nfunction Processor() {\n  this.store = [];\n}\n\nProcessor.prototype.list = function() {\n  return this.store;\n};\n\nProcessor.prototype.register = function(pattern, fn) {\n  if (!fn) {\n    if (typeof pattern === 'function') {\n      fn = pattern;\n      pattern = /(.*)/;\n    } else {\n      throw new TypeError('fn must be a function');\n    }\n  }\n\n  if (fn.length > 1) {\n    fn = Promise.promisify(fn);\n  } else {\n    fn = Promise.method(fn);\n  }\n\n  this.store.push({\n    pattern: new Pattern(pattern),\n    process: fn\n  });\n};\n\nmodule.exports = Processor;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/extend/renderer.js":"'use strict';\n\nvar pathFn = require('path');\nvar Promise = require('bluebird');\n\nfunction getExtname(str) {\n  if (typeof str !== 'string') return '';\n\n  var extname = pathFn.extname(str) || str;\n  return extname[0] === '.' ? extname.slice(1) : extname;\n}\n\nfunction Renderer() {\n  this.store = {};\n  this.storeSync = {};\n}\n\nRenderer.prototype.list = function(sync) {\n  return sync ? this.storeSync : this.store;\n};\n\nRenderer.prototype.get = function(name, sync) {\n  var store = this[sync ? 'storeSync' : 'store'];\n\n  return store[getExtname(name)] || store[name];\n};\n\nRenderer.prototype.isRenderable = function(path) {\n  return Boolean(this.get(path));\n};\n\nRenderer.prototype.isRenderableSync = function(path) {\n  return Boolean(this.get(path, true));\n};\n\nRenderer.prototype.getOutput = function(path) {\n  var renderer = this.get(path);\n  return renderer ? renderer.output : '';\n};\n\nRenderer.prototype.register = function(name, output, fn, sync) {\n  if (!name) throw new TypeError('name is required');\n  if (!output) throw new TypeError('output is required');\n  if (typeof fn !== 'function') throw new TypeError('fn must be a function');\n\n  name = getExtname(name);\n  output = getExtname(output);\n\n  if (sync) {\n    this.storeSync[name] = fn;\n    this.storeSync[name].output = output;\n\n    this.store[name] = Promise.method(fn);\n  } else {\n    if (fn.length > 2) fn = Promise.promisify(fn);\n    this.store[name] = fn;\n  }\n\n  this.store[name].output = output;\n  this.store[name].compile = fn.compile;\n};\n\nmodule.exports = Renderer;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/extend/tag.js":"'use strict';\n\nvar stripIndent = require('strip-indent');\nvar nunjucks = require('nunjucks');\nvar inherits = require('util').inherits;\nvar Promise = require('bluebird');\n\nfunction Tag() {\n  this.env = new nunjucks.Environment(null, {\n    autoescape: false\n  });\n}\n\nTag.prototype.register = function(name, fn, options) {\n  if (!name) throw new TypeError('name is required');\n  if (typeof fn !== 'function') throw new TypeError('fn must be a function');\n\n  if (options == null || typeof options === 'boolean') {\n    options = {ends: options};\n  }\n\n  var tag;\n\n  if (options.async) {\n    if (fn.length > 2) {\n      fn = Promise.promisify(fn);\n    } else {\n      fn = Promise.method(fn);\n    }\n\n    if (options.ends) {\n      tag = new NunjucksAsyncBlock(name, fn);\n    } else {\n      tag = new NunjucksAsyncTag(name, fn);\n    }\n  } else {\n    if (options.ends) {\n      tag = new NunjucksBlock(name, fn);\n    } else {\n      tag = new NunjucksTag(name, fn);\n    }\n  }\n\n  this.env.addExtension(name, tag);\n};\n\nvar placeholder = '\\uFFFC';\nvar rPlaceholder = /(?:<|&lt;)\\!--\\uFFFC(\\d+)--(?:>|&gt;)/g;\n\nTag.prototype.render = function(str, options, callback) {\n  if (!callback && typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  var cache = [];\n\n  function escapeContent(str) {\n    return '<!--' + placeholder + (cache.push(str) - 1) + '-->';\n  }\n\n  var env = this.env;\n\n  return new Promise(function(resolve, reject) {\n    str = str.replace(/<pre><code.*>[\\s\\S]*?<\\/code><\\/pre>/gm, escapeContent);\n    env.renderString(str, options, function(err, result) {\n      if (err) return reject(err);\n      resolve(result.replace(rPlaceholder, function() {\n        return cache[arguments[1]];\n      }));\n    });\n  });\n};\n\nfunction NunjucksTag(name, fn) {\n  this.tags = [name];\n  this.fn = fn;\n}\n\nNunjucksTag.prototype.parse = function(parser, nodes, lexer) {\n  var node = this._parseArgs(parser, nodes, lexer);\n\n  return new nodes.CallExtension(this, 'run', node, []);\n};\n\nNunjucksTag.prototype._parseArgs = function(parser, nodes, lexer) {\n  var tag = parser.nextToken();\n  var node = new nodes.NodeList(tag.lineno, tag.colno);\n  var token;\n\n  var argarray = new nodes.Array(tag.lineno, tag.colno);\n\n  var argitem = '';\n  while ((token = parser.nextToken(true))) {\n    if (token.type === lexer.TOKEN_WHITESPACE || token.type === lexer.TOKEN_BLOCK_END) {\n      if (argitem !== '') {\n        var argnode = new nodes.Literal(tag.lineno, tag.colno, argitem.trim());\n        argarray.addChild(argnode);\n        argitem = '';\n      }\n\n      if (token.type === lexer.TOKEN_BLOCK_END) {\n        break;\n      }\n    } else {\n      argitem += token.value;\n    }\n  }\n\n  node.addChild(argarray);\n\n  return node;\n};\n\nNunjucksTag.prototype.run = function(context, args) {\n  return this._run(context, args, '');\n};\n\nNunjucksTag.prototype._run = function(context, args, body) {\n  return this.fn.call(context.ctx, args, body);\n};\n\nfunction NunjucksBlock(name, fn) {\n  NunjucksTag.call(this, name, fn);\n}\n\ninherits(NunjucksBlock, NunjucksTag);\n\nNunjucksBlock.prototype.parse = function(parser, nodes, lexer) {\n  var node = this._parseArgs(parser, nodes, lexer);\n  var body = this._parseBody(parser, nodes, lexer);\n\n  return new nodes.CallExtension(this, 'run', node, [body]);\n};\n\nNunjucksBlock.prototype._parseBody = function(parser, nodes, lexer) {\n  var body = parser.parseUntilBlocks('end' + this.tags[0]);\n\n  parser.advanceAfterBlockEnd();\n  return body;\n};\n\nNunjucksBlock.prototype.run = function(context, args, body) {\n  return this._run(context, args, trimBody(body));\n};\n\nfunction trimBody(body) {\n  return stripIndent(body()).replace(/^\\n?|\\n?$/g, '');\n}\n\nfunction NunjucksAsyncTag(name, fn) {\n  NunjucksTag.call(this, name, fn);\n}\n\ninherits(NunjucksAsyncTag, NunjucksTag);\n\nNunjucksAsyncTag.prototype.parse = function(parser, nodes, lexer) {\n  var node = this._parseArgs(parser, nodes, lexer);\n\n  return new nodes.CallExtensionAsync(this, 'run', node, []);\n};\n\nNunjucksAsyncTag.prototype.run = function(context, args, callback) {\n  return this._run(context, args, '').then(function(result) {\n    callback(null, result);\n  }, callback);\n};\n\nfunction NunjucksAsyncBlock(name, fn) {\n  NunjucksBlock.call(this, name, fn);\n}\n\ninherits(NunjucksAsyncBlock, NunjucksBlock);\n\nNunjucksAsyncBlock.prototype.parse = function(parser, nodes, lexer) {\n  var node = this._parseArgs(parser, nodes, lexer);\n  var body = this._parseBody(parser, nodes, lexer);\n\n  return new nodes.CallExtensionAsync(this, 'run', node, [body]);\n};\n\nNunjucksAsyncBlock.prototype.run = function(context, args, body, callback) {\n  return this._run(context, args, trimBody(body)).then(function(result) {\n    callback(null, result);\n  }, callback);\n};\n\nmodule.exports = Tag;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/hexo/render.js":"'use strict';\n\nvar pathFn = require('path');\nvar Promise = require('bluebird');\nvar fs = require('hexo-fs');\n\nfunction getExtname(str) {\n  if (typeof str !== 'string') return '';\n\n  var extname = pathFn.extname(str);\n  return extname[0] === '.' ? extname.slice(1) : extname;\n}\n\nfunction Render(ctx) {\n  this.context = ctx;\n  this.renderer = ctx.extend.renderer;\n}\n\nRender.prototype.isRenderable = function(path) {\n  return this.renderer.isRenderable(path);\n};\n\nRender.prototype.isRenderableSync = function(path) {\n  return this.renderer.isRenderableSync(path);\n};\n\nRender.prototype.getOutput = function(path) {\n  return this.renderer.getOutput(path);\n};\n\nRender.prototype.getRenderer = function(ext, sync) {\n  return this.renderer.get(ext, sync);\n};\n\nRender.prototype.getRendererSync = function(ext) {\n  return this.getRenderer(ext, true);\n};\n\nRender.prototype.render = function(data, options, callback) {\n  if (!callback && typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  var ctx = this.context;\n  var self = this;\n  var ext = '';\n\n  return new Promise(function(resolve, reject) {\n    if (!data) return reject(new TypeError('No input file or string!'));\n    if (data.text != null) return resolve(data.text);\n    if (!data.path) return reject(new TypeError('No input file or string!'));\n\n    fs.readFile(data.path).then(resolve, reject);\n  }).then(function(text) {\n    data.text = text;\n    ext = data.engine || getExtname(data.path);\n    if (!ext || !self.isRenderable(ext)) return text;\n\n    var renderer = self.getRenderer(ext);\n    return renderer.call(ctx, data, options);\n  }).then(function(result) {\n    result = toString(result, data);\n    if (data.onRenderEnd) {\n      return data.onRenderEnd(result);\n    }\n\n    return result;\n  }).then(function(result) {\n    var output = self.getOutput(ext) || ext;\n    return ctx.execFilter('after_render:' + output, result, {\n      context: ctx,\n      args: [data]\n    });\n  }).asCallback(callback);\n};\n\nRender.prototype.renderSync = function(data, options) {\n  if (!data) throw new TypeError('No input file or string!');\n\n  options = options || {};\n\n  var ctx = this.context;\n\n  if (data.text == null) {\n    if (!data.path) throw new TypeError('No input file or string!');\n    data.text = fs.readFileSync(data.path);\n  }\n\n  if (data.text == null) throw new TypeError('No input file or string!');\n\n  var ext = data.engine || getExtname(data.path);\n  var result;\n\n  if (ext && this.isRenderableSync(ext)) {\n    var renderer = this.getRendererSync(ext);\n    result = renderer.call(ctx, data, options);\n  } else {\n    result = data.text;\n  }\n\n  var output = this.getOutput(ext) || ext;\n  result = toString(result, data);\n\n  if (data.onRenderEnd) {\n    result = data.onRenderEnd(result);\n  }\n\n  return ctx.execFilterSync('after_render:' + output, result, {\n    context: ctx,\n    args: [data]\n  });\n};\n\nfunction toString(result, options) {\n  if (!options.hasOwnProperty('toString') || typeof result === 'string') return result;\n\n  if (typeof options.toString === 'function') {\n    return options.toString(result);\n  } else if (typeof result === 'object') {\n    return JSON.stringify(result);\n  } else if (result.toString) {\n    return result.toString();\n  }\n\n  return result;\n}\n\nmodule.exports = Render;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/hexo/register_models.js":"'use strict';\n\nvar models = require('../models');\n\nmodule.exports = function(ctx) {\n  var db = ctx.database;\n\n  var keys = Object.keys(models);\n  var key = '';\n\n  for (var i = 0, len = keys.length; i < len; i++) {\n    key = keys[i];\n    db.model(key, models[key](ctx));\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/models/index.js":"'use strict';\n\nexports.Asset = require('./asset');\nexports.Cache = require('./cache');\nexports.Category = require('./category');\nexports.Data = require('./data');\nexports.Page = require('./page');\nexports.Post = require('./post');\nexports.PostAsset = require('./post_asset');\nexports.PostCategory = require('./post_category');\nexports.PostTag = require('./post_tag');\nexports.Tag = require('./tag');\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/models/asset.js":"'use strict';\n\nvar Schema = require('warehouse').Schema;\nvar pathFn = require('path');\n\nmodule.exports = function(ctx) {\n  var Asset = new Schema({\n    _id: {type: String, required: true},\n    path: {type: String, required: true},\n    modified: {type: Boolean, default: true},\n    renderable: {type: Boolean, default: true}\n  });\n\n  Asset.virtual('source').get(function() {\n    return pathFn.join(ctx.base_dir, this._id);\n  });\n\n  return Asset;\n};\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/models/cache.js":"'use strict';\n\nvar Schema = require('warehouse').Schema;\nvar Promise = require('bluebird');\n\nmodule.exports = function(ctx) {\n  var Cache = new Schema({\n    _id: {type: String, required: true},\n    hash: {type: String, default: ''},\n    modified: {type: Number, default: Date.now}\n  });\n\n  Cache.static('compareFile', function(id, hashFn, statFn) {\n    var cache = this.findById(id);\n    var self = this;\n    var mtime;\n\n    // If cache does not exist, then it must be a new file. We have to get both\n    // file hash and stats.\n    if (!cache) {\n      return Promise.all([hashFn(id), statFn(id)]).spread(function(hash, stats) {\n        return self.insert({\n          _id: id,\n          hash: hash,\n          modified: stats.mtime\n        });\n      }).thenReturn({\n        type: 'create'\n      });\n    }\n\n    // Get file stats\n    return statFn(id).then(function(stats) {\n      mtime = stats.mtime;\n\n      // Skip the file if the modified time is unchanged\n      if (cache.modified === mtime) {\n        return {\n          type: 'skip'\n        };\n      }\n\n      // Get file hash\n      return hashFn(id);\n    }).then(function(result) {\n      // If the result is an object, skip the following steps because it's an\n      // unchanged file\n      if (typeof result === 'object') return result;\n\n      var hash = result;\n\n      // Skip the file if the hash is unchanged\n      if (cache.hash === hash) {\n        return {\n          type: 'skip'\n        };\n      }\n\n      // Update cache info\n      cache.hash = hash;\n      cache.modified = mtime;\n\n      return cache.save().thenReturn({\n        type: 'update'\n      });\n    });\n  });\n\n  return Cache;\n};\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/models/category.js":"'use strict';\n\nvar Schema = require('warehouse').Schema;\nvar util = require('hexo-util');\nvar slugize = util.slugize;\n\nmodule.exports = function(ctx) {\n  var Category = new Schema({\n    name: {type: String, required: true},\n    parent: {type: Schema.Types.CUID, ref: 'Category'}\n  });\n\n  Category.virtual('slug').get(function() {\n    var map = ctx.config.category_map || {};\n    var name = this.name;\n    var str = '';\n\n    if (!name) return;\n\n    if (this.parent) {\n      var parent = ctx.model('Category').findById(this.parent);\n      str += parent.slug + '/';\n    }\n\n    name = map[name] || name;\n    str += slugize(name, {transform: ctx.config.filename_case});\n\n    return str;\n  });\n\n  Category.virtual('path').get(function() {\n    var catDir = ctx.config.category_dir;\n    if (catDir === '/') catDir = '';\n    if (catDir.length && catDir[catDir.length - 1] !== '/') catDir += '/';\n\n    return catDir + this.slug + '/';\n  });\n\n  Category.virtual('permalink').get(function() {\n    return ctx.config.url + '/' + this.path;\n  });\n\n  Category.virtual('posts').get(function() {\n    var PostCategory = ctx.model('PostCategory');\n\n    var ids = PostCategory.find({category_id: this._id}).map(function(item) {\n      return item.post_id;\n    });\n\n    return ctx.locals.get('posts').find({\n      _id: {$in: ids}\n    });\n  });\n\n  Category.virtual('length').get(function() {\n    return this.posts.length;\n  });\n\n  // Check whether a category exists\n  Category.pre('save', function(data) {\n    var name = data.name;\n    var parent = data.parent;\n    if (!name) return;\n\n    var Category = ctx.model('Category');\n    var cat = Category.findOne({\n      name: name,\n      parent: parent || {$exists: false}\n    }, {lean: true});\n\n    if (cat) {\n      throw new Error('Category `' + name + '` has already existed!');\n    }\n  });\n\n  // Remove PostCategory references\n  Category.pre('remove', function(data) {\n    var PostCategory = ctx.model('PostCategory');\n    return PostCategory.remove({category_id: data._id});\n  });\n\n  return Category;\n};\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/models/data.js":"'use strict';\n\nvar Schema = require('warehouse').Schema;\n\nmodule.exports = function(ctx) {\n  var Data = new Schema({\n    _id: {type: String, required: true},\n    data: Object\n  });\n\n  return Data;\n};\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/models/page.js":"'use strict';\n\nvar Schema = require('warehouse').Schema;\nvar pathFn = require('path');\nvar Moment = require('./types/moment');\nvar moment = require('moment');\n\nmodule.exports = function(ctx) {\n  var Page = new Schema({\n    title: {type: String, default: ''},\n    date: {\n      type: Moment,\n      default: moment,\n      language: ctx.config.languages,\n      timezone: ctx.config.timezone\n    },\n    updated: {\n      type: Moment,\n      default: moment,\n      language: ctx.config.languages,\n      timezone: ctx.config.timezone\n    },\n    comments: {type: Boolean, default: true},\n    layout: {type: String, default: 'page'},\n    _content: {type: String, default: ''},\n    source: {type: String, required: true},\n    path: {type: String, required: true},\n    raw: {type: String, default: ''},\n    content: {type: String},\n    excerpt: {type: String},\n    more: {type: String}\n  });\n\n  Page.virtual('permalink').get(function() {\n    return ctx.config.url + '/' + this.path;\n  });\n\n  Page.virtual('full_source').get(function() {\n    return pathFn.join(ctx.source_dir, this.source || '');\n  });\n\n  return Page;\n};\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/models/types/moment.js":"'use strict';\n\nvar moment = require('moment-timezone');\nvar SchemaType = require('warehouse').SchemaType;\nvar util = require('util');\n\nfunction SchemaTypeMoment(name, options) {\n  SchemaType.call(this, name, options);\n}\n\nutil.inherits(SchemaTypeMoment, SchemaType);\n\nfunction toMoment(value) {\n  // FIXME: Something is wrong when using a moment instance. I try to get the\n  // original date object and create a new moment object again.\n  if (moment.isMoment(value)) return moment(value._d);\n  return moment(value);\n}\n\nSchemaTypeMoment.prototype.cast = function(value, data) {\n  value = SchemaType.prototype.cast.call(this, value, data);\n  if (value == null) return value;\n\n  var options = this.options;\n  value = toMoment(value);\n\n  if (options.language) value = value.locale(options.language);\n  if (options.timezone) value = value.tz(options.timezone);\n\n  return value;\n};\n\nSchemaTypeMoment.prototype.validate = function(value, data) {\n  value = SchemaType.prototype.validate.call(this, value, data);\n  if (value == null) return value;\n\n  value = toMoment(value);\n\n  if (!value.isValid()) {\n    throw new Error('`' + value + '` is not a valid date!');\n  }\n\n  return value;\n};\n\nSchemaTypeMoment.prototype.match = function(value, query, data) {\n  return value ? value.valueOf() === query.valueOf() : false;\n};\n\nSchemaTypeMoment.prototype.compare = function(a, b) {\n  if (a) {\n    if (b) return a - b;\n    return 1;\n  }\n\n  if (b) return -1;\n  return 0;\n};\n\nSchemaTypeMoment.prototype.parse = function(value, data) {\n  if (value) return toMoment(value);\n};\n\nSchemaTypeMoment.prototype.value = function(value, data) {\n  // FIXME: Same as above. Also a dirty hack.\n  return value ? value._d.toISOString() : value;\n};\n\nSchemaTypeMoment.prototype.q$day = function(value, query, data) {\n  return value ? value.date() === query : false;\n};\n\nSchemaTypeMoment.prototype.q$month = function(value, query, data) {\n  return value ? value.month() === query : false;\n};\n\nSchemaTypeMoment.prototype.q$year = function(value, query, data) {\n  return value ? value.year() === query : false;\n};\n\nSchemaTypeMoment.prototype.u$inc = function(value, update, data) {\n  if (!value) return value;\n  return value.add(update);\n};\n\nSchemaTypeMoment.prototype.u$dec = function(value, update, data) {\n  if (!value) return value;\n  return value.subtract(update);\n};\n\nmodule.exports = SchemaTypeMoment;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/models/post.js":"'use strict';\n\nvar Schema = require('warehouse').Schema;\nvar moment = require('moment');\nvar pathFn = require('path');\nvar Promise = require('bluebird');\nvar _ = require('lodash');\nvar Moment = require('./types/moment');\n\nfunction pickID(data) {\n  return data._id;\n}\n\nfunction removeEmptyTag(tags) {\n  return tags.filter(function(tag) {\n    return tag != null && tag !== '';\n  }).map(function(tag) {\n    return tag + '';\n  });\n}\n\nmodule.exports = function(ctx) {\n  var Post = new Schema({\n    id: String,\n    title: {type: String, default: ''},\n    date: {\n      type: Moment,\n      default: moment,\n      language: ctx.config.languages,\n      timezone: ctx.config.timezone\n    },\n    updated: {\n      type: Moment,\n      default: moment,\n      language: ctx.config.languages,\n      timezone: ctx.config.timezone\n    },\n    comments: {type: Boolean, default: true},\n    layout: {type: String, default: 'post'},\n    _content: {type: String, default: ''},\n    source: {type: String, required: true},\n    slug: {type: String, required: true},\n    photos: [String],\n    link: {type: String, default: ''},\n    raw: {type: String, default: ''},\n    published: {type: Boolean, default: true},\n    content: {type: String},\n    excerpt: {type: String},\n    more: {type: String}\n  });\n\n  Post.virtual('path').get(function() {\n    var path = ctx.execFilterSync('post_permalink', this, {context: ctx});\n    return typeof path === 'string' ? path : '';\n  });\n\n  Post.virtual('permalink').get(function() {\n    var url_for = ctx.extend.helper.get('url_for');\n    var config = ctx.config;\n    var partial_url = url_for.call(ctx, this.path);\n    return config.url + _.replace(partial_url, config.root, '/');\n  });\n\n  Post.virtual('full_source').get(function() {\n    return pathFn.join(ctx.source_dir, this.source || '');\n  });\n\n  Post.virtual('asset_dir').get(function() {\n    var src = this.full_source;\n    return src.substring(0, src.length - pathFn.extname(src).length) + pathFn.sep;\n  });\n\n  Post.virtual('tags').get(function() {\n    var PostTag = ctx.model('PostTag');\n    var Tag = ctx.model('Tag');\n\n    var ids = PostTag.find({post_id: this._id}, {lean: true}).map(function(item) {\n      return item.tag_id;\n    });\n\n    return Tag.find({_id: {$in: ids}});\n  });\n\n  Post.method('setTags', function(tags) {\n    tags = removeEmptyTag(tags);\n\n    var PostTag = ctx.model('PostTag');\n    var Tag = ctx.model('Tag');\n    var id = this._id;\n    var existed = PostTag.find({post_id: id}, {lean: true}).map(pickID);\n\n    return Promise.map(tags, function(tag) {\n      // Find the tag by name\n      var data = Tag.findOne({name: tag}, {lean: true});\n      if (data) return data;\n\n      // Insert the tag if not exist\n      return Tag.insert({name: tag}).catch(function(err) {\n        // Try to find the tag again. Throw the error if not found\n        var data = Tag.findOne({name: tag}, {lean: true});\n\n        if (data) return data;\n        throw err;\n      });\n    }).map(function(tag) {\n      // Find the reference\n      var ref = PostTag.findOne({post_id: id, tag_id: tag._id}, {lean: true});\n      if (ref) return ref;\n\n      // Insert the reference if not exist\n      return PostTag.insert({\n        post_id: id,\n        tag_id: tag._id\n      });\n    }).then(function(tags) {\n      // Remove old tags\n      var deleted = _.difference(existed, tags.map(pickID));\n      return deleted;\n    }).map(function(tag) {\n      return PostTag.removeById(tag);\n    });\n  });\n\n  Post.virtual('categories').get(function() {\n    var PostCategory = ctx.model('PostCategory');\n    var Category = ctx.model('Category');\n\n    var ids = PostCategory.find({post_id: this._id}, {lean: true}).map(function(item) {\n      return item.category_id;\n    });\n\n    return Category.find({_id: {$in: ids}});\n  });\n\n  Post.method('setCategories', function(cats) {\n    cats = removeEmptyTag(cats);\n\n    var PostCategory = ctx.model('PostCategory');\n    var Category = ctx.model('Category');\n    var id = this._id;\n    var arr = [];\n    var existed = PostCategory.find({post_id: id}, {lean: true}).map(pickID);\n\n    // Don't use \"Promise.map\". It doesn't run in series.\n    // MUST USE \"Promise.each\".\n    return Promise.each(cats, function(cat, i) {\n      // Find the category by name\n      var data = Category.findOne({\n        name: cat,\n        parent: i ? arr[i - 1] : {$exists: false}\n      }, {lean: true});\n\n      if (data) {\n        arr.push(data._id);\n        return data;\n      }\n\n      // Insert the category if not exist\n      var obj = {name: cat};\n      if (i) obj.parent = arr[i - 1];\n\n      return Category.insert(obj).catch(function(err) {\n        // Try to find the category again. Throw the error if not found\n        var data = Category.findOne({\n          name: cat,\n          parent: i ? arr[i - 1] : {$exists: false}\n        }, {lean: true});\n\n        if (data) return data;\n        throw err;\n      }).then(function(data) {\n        arr.push(data._id);\n        return data;\n      });\n    }).map(function() {\n      // Get the index from the second argument\n      // and get the category id from arr.\n      var cat = arr[arguments[1]];\n\n      // Find the reference\n      var ref = PostCategory.findOne({post_id: id, category_id: cat}, {lean: true});\n      if (ref) return ref;\n\n      // Insert the reference if not exist\n      return PostCategory.insert({\n        post_id: id,\n        category_id: cat\n      });\n    }).then(function(cats) {\n      // Remove old categories\n      var deleted = _.difference(existed, cats.map(pickID));\n      return deleted;\n    }).map(function(cat) {\n      return PostCategory.removeById(cat);\n    });\n  });\n\n  // Remove PostTag references\n  Post.pre('remove', function(data) {\n    var PostTag = ctx.model('PostTag');\n    return PostTag.remove({post_id: data._id});\n  });\n\n  // Remove PostCategory references\n  Post.pre('remove', function(data) {\n    var PostCategory = ctx.model('PostCategory');\n    return PostCategory.remove({post_id: data._id});\n  });\n\n  // Remove assets\n  Post.pre('remove', function(data) {\n    var PostAsset = ctx.model('PostAsset');\n    return PostAsset.remove({post: data._id});\n  });\n\n  return Post;\n};\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/models/post_asset.js":"'use strict';\n\nvar Schema = require('warehouse').Schema;\nvar pathFn = require('path');\n\nmodule.exports = function(ctx) {\n  var PostAsset = new Schema({\n    _id: {type: String, required: true},\n    slug: {type: String, required: true},\n    modified: {type: Boolean, default: true},\n    post: {type: Schema.Types.CUID, ref: 'Post'},\n    renderable: {type: Boolean, default: true}\n  });\n\n  PostAsset.virtual('path').get(function() {\n    var Post = ctx.model('Post');\n    var post = Post.findById(this.post);\n    if (!post) return;\n\n    // PostAsset.path is file path relative to `public_dir`\n    // no need to urlescape, #1562\n    return pathFn.join(post.path, this.slug);\n  });\n\n  PostAsset.virtual('source').get(function() {\n    return pathFn.join(ctx.base_dir, this._id);\n  });\n\n  return PostAsset;\n};\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/models/post_category.js":"'use strict';\n\nvar Schema = require('warehouse').Schema;\n\nmodule.exports = function(ctx) {\n  var PostCategory = new Schema({\n    post_id: {type: Schema.Types.CUID, ref: 'Post'},\n    category_id: {type: Schema.Types.CUID, ref: 'Category'}\n  });\n\n  return PostCategory;\n};\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/models/post_tag.js":"'use strict';\n\nvar Schema = require('warehouse').Schema;\n\nmodule.exports = function(ctx) {\n  var PostTag = new Schema({\n    post_id: {type: Schema.Types.CUID, ref: 'Post'},\n    tag_id: {type: Schema.Types.CUID, ref: 'Tag'}\n  });\n\n  return PostTag;\n};\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/models/tag.js":"'use strict';\n\nvar Schema = require('warehouse').Schema;\nvar util = require('hexo-util');\nvar slugize = util.slugize;\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nmodule.exports = function(ctx) {\n  var Tag = new Schema({\n    name: {type: String, required: true}\n  });\n\n  Tag.virtual('slug').get(function() {\n    var map = ctx.config.tag_map || {};\n    var name = this.name;\n    if (!name) return;\n\n    if (hasOwn.call(map, name)) {\n      name = map[name] || name;\n    }\n\n    return slugize(name, {transform: ctx.config.filename_case});\n  });\n\n  Tag.virtual('path').get(function() {\n    var tagDir = ctx.config.tag_dir;\n    if (tagDir[tagDir.length - 1] !== '/') tagDir += '/';\n\n    return tagDir + this.slug + '/';\n  });\n\n  Tag.virtual('permalink').get(function() {\n    return ctx.config.url + '/' + this.path;\n  });\n\n  Tag.virtual('posts').get(function() {\n    var PostTag = ctx.model('PostTag');\n\n    var ids = PostTag.find({tag_id: this._id}).map(function(item) {\n      return item.post_id;\n    });\n\n    return ctx.locals.get('posts').find({\n      _id: {$in: ids}\n    });\n  });\n\n  Tag.virtual('length').get(function() {\n    return this.posts.length;\n  });\n\n  // Check whether a tag exists\n  Tag.pre('save', function(data) {\n    var name = data.name;\n    if (!name) return;\n\n    var Tag = ctx.model('Tag');\n    var tag = Tag.findOne({name: name}, {lean: true});\n\n    if (tag) {\n      throw new Error('Tag `' + name + '` has already existed!');\n    }\n  });\n\n  // Remove PostTag references\n  Tag.pre('remove', function(data) {\n    var PostTag = ctx.model('PostTag');\n    return PostTag.remove({tag_id: data._id});\n  });\n\n  return Tag;\n};\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/hexo/post.js":"'use strict';\n\nvar moment = require('moment');\nvar Promise = require('bluebird');\nvar pathFn = require('path');\nvar _ = require('lodash');\nvar yaml = require('js-yaml');\nvar util = require('hexo-util');\nvar fs = require('hexo-fs');\nvar yfm = require('hexo-front-matter');\n\nvar slugize = util.slugize;\nvar escapeRegExp = util.escapeRegExp;\n\nvar rEscapeContent = /<escape(?:[^>]*)>([\\s\\S]*?)<\\/escape>/g;\nvar rSwigVar = /\\{\\{[\\s\\S]*?\\}\\}/g;\nvar rSwigComment = /\\{#[\\s\\S]*?#\\}/g;\nvar rSwigBlock = /\\{%[\\s\\S]*?%\\}/g;\nvar rSwigFullBlock = /\\{% *(.+?)(?: *| +.*)%\\}[\\s\\S]+?\\{% *end\\1 *%\\}/g;\nvar placeholder = '\\uFFFC';\nvar rPlaceholder = /(?:<|&lt;)\\!--\\uFFFC(\\d+)--(?:>|&gt;)/g;\n\nvar preservedKeys = {\n  title: true,\n  slug: true,\n  path: true,\n  layout: true,\n  date: true,\n  content: true\n};\n\nfunction Post(context) {\n  this.context = context;\n}\n\nPost.prototype.create = function(data, replace, callback) {\n  if (!callback && typeof replace === 'function') {\n    callback = replace;\n    replace = false;\n  }\n\n  var ctx = this.context;\n  var config = ctx.config;\n\n  data.slug = slugize((data.slug || data.title).toString(), {transform: config.filename_case});\n  data.layout = (data.layout || config.default_layout).toLowerCase();\n  data.date = data.date ? moment(data.date) : moment();\n\n  return Promise.all([\n    // Get the post path\n    ctx.execFilter('new_post_path', data, {\n      args: [replace],\n      context: ctx\n    }),\n    this._renderScaffold(data)\n  ]).spread(function(path, content) {\n    var result = {\n      path: path,\n      content: content\n    };\n\n    return Promise.all([\n      // Write content to file\n      fs.writeFile(path, content),\n      // Create asset folder\n      createAssetFolder(path, config.post_asset_folder)\n    ]).then(function() {\n      ctx.emit('new', result);\n    }).thenReturn(result);\n  }).asCallback(callback);\n};\n\nfunction prepareFrontMatter(data) {\n  var keys = Object.keys(data);\n  var key = '';\n  var item;\n\n  for (var i = 0, len = keys.length; i < len; i++) {\n    key = keys[i];\n    item = data[key];\n\n    if (moment.isMoment(item)) {\n      data[key] = item.utc().format('YYYY-MM-DD HH:mm:ss');\n    } else if (moment.isDate(item)) {\n      data[key] = moment.utc(item).format('YYYY-MM-DD HH:mm:ss');\n    } else if (typeof item === 'string') {\n      data[key] = '\"' + item + '\"';\n    }\n  }\n\n  return data;\n}\n\nPost.prototype._getScaffold = function(layout) {\n  var ctx = this.context;\n\n  return ctx.scaffold.get(layout).then(function(result) {\n    if (result != null) return result;\n    return ctx.scaffold.get('normal');\n  });\n};\n\nPost.prototype._renderScaffold = function(data) {\n  var tag = this.context.extend.tag;\n  var yfmSplit;\n\n  return this._getScaffold(data.layout).then(function(scaffold) {\n    var frontMatter = prepareFrontMatter(_.clone(data));\n    yfmSplit = yfm.split(scaffold);\n\n    return tag.render(yfmSplit.data, frontMatter);\n  }).then(function(frontMatter) {\n    var separator = yfmSplit.separator;\n    var jsonMode = separator[0] === ';';\n    var content = '';\n    var obj;\n\n    // Parse front-matter\n    if (jsonMode) {\n      obj = JSON.parse('{' + frontMatter + '}');\n    } else {\n      obj = yaml.load(frontMatter);\n    }\n\n    // Add data which are not in the front-matter\n    var keys = Object.keys(data);\n    var key = '';\n\n    for (var i = 0, len = keys.length; i < len; i++) {\n      key = keys[i];\n\n      if (!preservedKeys[key] && obj[key] == null) {\n        obj[key] = data[key];\n      }\n    }\n\n    // Prepend the separator\n    if (yfmSplit.prefixSeparator) content += separator + '\\n';\n\n    content += yfm.stringify(obj, {\n      mode: jsonMode ? 'json' : ''\n    });\n\n    // Concat content\n    content += yfmSplit.content;\n\n    if (data.content) {\n      content += '\\n' + data.content;\n    }\n\n    return content;\n  });\n};\n\nfunction createAssetFolder(path, assetFolder) {\n  if (!assetFolder) return Promise.resolve();\n\n  var target = removeExtname(path);\n\n  return fs.exists(target).then(function(exist) {\n    if (!exist) return fs.mkdirs(target);\n  });\n}\n\nfunction removeExtname(str) {\n  return str.substring(0, str.length - pathFn.extname(str).length);\n}\n\nPost.prototype.publish = function(data, replace, callback) {\n  if (!callback && typeof replace === 'function') {\n    callback = replace;\n    replace = false;\n  }\n\n  if (data.layout === 'draft') data.layout = 'post';\n\n  var ctx = this.context;\n  var config = ctx.config;\n  var draftDir = pathFn.join(ctx.source_dir, '_drafts');\n  var slug = data.slug = slugize(data.slug.toString(), {transform: config.filename_case});\n  var regex = new RegExp('^' + escapeRegExp(slug) + '(?:[^\\\\/\\\\\\\\]+)');\n  var self = this;\n  var src = '';\n  var result = {};\n\n  data.layout = (data.layout || config.default_layout).toLowerCase();\n\n  // Find the draft\n  return fs.listDir(draftDir).then(function(list) {\n    var item = '';\n\n    for (var i = 0, len = list.length; i < len; i++) {\n      item = list[i];\n      if (regex.test(item)) return item;\n    }\n  }).then(function(item) {\n    if (!item) throw new Error('Draft \"' + slug + '\" does not exist.');\n\n    // Read the content\n    src = pathFn.join(draftDir, item);\n    return fs.readFile(src);\n  }).then(function(content) {\n    // Create post\n    _.extend(data, yfm(content));\n    data.content = data._content;\n    delete data._content;\n\n    return self.create(data, replace).then(function(post) {\n      result.path = post.path;\n      result.content = post.content;\n    });\n  }).then(function() {\n    // Remove the original draft file\n    return fs.unlink(src);\n  }).then(function() {\n    if (!config.post_asset_folder) return;\n\n    // Copy assets\n    var assetSrc = removeExtname(src);\n    var assetDest = removeExtname(result.path);\n\n    return fs.exists(assetSrc).then(function(exist) {\n      if (!exist) return;\n\n      return fs.copyDir(assetSrc, assetDest).then(function() {\n        return fs.rmdir(assetSrc);\n      });\n    });\n  }).thenReturn(result).asCallback(callback);\n};\n\nPost.prototype.render = function(source, data, callback) {\n  data = data || {};\n\n  var ctx = this.context;\n  var config = ctx.config;\n  var cache = [];\n  var tag = ctx.extend.tag;\n  var isSwig = data.engine === 'swig' || (source && pathFn.extname(source) === '.swig');\n\n  function escapeContent(str) {\n    return '<!--' + placeholder + (cache.push(str) - 1) + '-->';\n  }\n\n  function tagFilter(content) {\n    // Replace cache data with real contents\n    content = content.replace(rPlaceholder, function() {\n      return cache[arguments[1]];\n    });\n\n    // Render with Nunjucks\n    data.content = content;\n    return tag.render(data.content, data);\n  }\n\n  return new Promise(function(resolve, reject) {\n    if (data.content != null) return resolve(data.content);\n    if (!source) return reject(new Error('No input file or string!'));\n\n    // Read content from files\n    fs.readFile(source).then(resolve, reject);\n  }).then(function(content) {\n    data.content = content;\n\n    // Run \"before_post_render\" filters\n    return ctx.execFilter('before_post_render', data, {context: ctx}).then(function() {\n      data.content = data.content.replace(rEscapeContent, function(match, content) {\n        return escapeContent(content);\n      });\n    });\n  }).then(function() {\n    // Skip rendering if this is a swig file\n    if (isSwig) return data.content;\n\n    // Escape all Swig tags\n    data.content = data.content\n      .replace(rSwigFullBlock, escapeContent)\n      .replace(rSwigBlock, escapeContent)\n      .replace(rSwigComment, '')\n      .replace(rSwigVar, escapeContent);\n\n    var options = data.markdown || {};\n    if (!config.highlight.enable) options.highlight = null;\n\n    // Render with markdown or other renderer\n    return ctx.render.render({\n      text: data.content,\n      path: source,\n      engine: data.engine,\n      toString: true,\n      onRenderEnd: tagFilter\n    }, options);\n  }).then(function(content) {\n    data.content = content;\n\n    if (!isSwig) {\n      return data.content;\n    }\n\n    // Render with Nunjucks\n    return tag.render(data.content, data);\n  }).then(function(content) {\n    data.content = content;\n\n    // Run \"after_post_render\" filters\n    return ctx.execFilter('after_post_render', data, {context: ctx});\n  });\n};\n\nmodule.exports = Post;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/hexo/scaffold.js":"'use strict';\n\nvar pathFn = require('path');\nvar fs = require('hexo-fs');\n\nfunction Scaffold(context) {\n  this.context = context;\n  this.scaffoldDir = context.scaffold_dir;\n}\n\nScaffold.prototype.defaults = {\n  normal: [\n    '---',\n    'layout: {{ layout }}',\n    'title: {{ title }}',\n    'date: {{ date }}',\n    'tags:',\n    '---'\n  ].join('\\n')\n};\n\nScaffold.prototype._listDir = function() {\n  var scaffoldDir = this.scaffoldDir;\n\n  return fs.exists(scaffoldDir).then(function(exist) {\n    if (!exist) return [];\n\n    return fs.listDir(scaffoldDir, {\n      ignoreFilesRegex: /^_|\\/_/\n    });\n  }).map(function(item) {\n    return {\n      name: item.substring(0, item.length - pathFn.extname(item).length),\n      path: pathFn.join(scaffoldDir, item)\n    };\n  });\n};\n\nScaffold.prototype._getScaffold = function(name) {\n  return this._listDir().then(function(list) {\n    var item;\n\n    for (var i = 0, len = list.length; i < len; i++) {\n      item = list[i];\n      if (item.name === name) return item;\n    }\n  });\n};\n\nScaffold.prototype.get = function(name, callback) {\n  var self = this;\n\n  return this._getScaffold(name).then(function(item) {\n    if (item) {\n      return fs.readFile(item.path);\n    }\n\n    return self.defaults[name];\n  }).asCallback(callback);\n};\n\nScaffold.prototype.set = function(name, content, callback) {\n  var scaffoldDir = this.scaffoldDir;\n\n  return this._getScaffold(name).then(function(item) {\n    var path = item ? item.path : pathFn.join(scaffoldDir, name);\n    if (!pathFn.extname(path)) path += '.md';\n\n    return fs.writeFile(path, content);\n  }).asCallback(callback);\n};\n\nScaffold.prototype.remove = function(name, callback) {\n  return this._getScaffold(name).then(function(item) {\n    if (!item) return;\n\n    return fs.unlink(item.path);\n  }).asCallback(callback);\n};\n\nmodule.exports = Scaffold;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/hexo/source.js":"'use strict';\n\nvar Box = require('../box');\nvar util = require('util');\n\nfunction Source(ctx) {\n  Box.call(this, ctx, ctx.source_dir);\n\n  this.processors = ctx.extend.processor.list();\n}\n\nutil.inherits(Source, Box);\n\nmodule.exports = Source;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/box/index.js":"'use strict';\n\nvar pathFn = require('path');\nvar Promise = require('bluebird');\nvar _ = require('lodash');\nvar File = require('./file');\nvar util = require('hexo-util');\nvar fs = require('hexo-fs');\nvar chalk = require('chalk');\nvar EventEmitter = require('events').EventEmitter;\n\nvar Pattern = util.Pattern;\nvar join = pathFn.join;\nvar sep = pathFn.sep;\n\nvar defaultPattern = new Pattern(function() {\n  return {};\n});\n\nfunction Box(ctx, base, options) {\n  EventEmitter.call(this);\n\n  this.options = _.assign({\n    persistent: true\n  }, options);\n\n  if (base.substring(base.length - 1) !== sep) {\n    base += sep;\n  }\n\n  this.context = ctx;\n  this.base = base;\n  this.processors = [];\n  this._processingFiles = {};\n  this.watcher = null;\n  this.Cache = ctx.model('Cache');\n  this.File = this._createFileClass();\n}\n\nrequire('util').inherits(Box, EventEmitter);\n\nfunction escapeBackslash(path) {\n  // Replace backslashes on Windows\n  return path.replace(/\\\\/g, '/');\n}\n\nfunction getHash(path) {\n  return new Promise(function(resolve, reject) {\n    var src = fs.createReadStream(path);\n    var hasher = new util.HashStream();\n\n    src.pipe(hasher)\n      .on('finish', function() {\n        resolve(hasher.read().toString('hex'));\n      })\n      .on('error', reject);\n  });\n}\n\nBox.prototype._createFileClass = function() {\n  var ctx = this.context;\n\n  var _File = function(data) {\n    File.call(this, data);\n  };\n\n  require('util').inherits(_File, File);\n\n  _File.prototype.box = this;\n\n  _File.prototype.render = function(options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return ctx.render.render({\n      path: this.source\n    }, options).asCallback(callback);\n  };\n\n  _File.prototype.renderSync = function(options) {\n    return ctx.render.renderSync({\n      path: this.source\n    }, options);\n  };\n\n  return _File;\n};\n\nBox.prototype.addProcessor = function(pattern, fn) {\n  if (!fn && typeof pattern === 'function') {\n    fn = pattern;\n    pattern = defaultPattern;\n  }\n\n  if (typeof fn !== 'function') throw new TypeError('fn must be a function');\n  if (!(pattern instanceof Pattern)) pattern = new Pattern(pattern);\n\n  this.processors.push({\n    pattern: pattern,\n    process: fn\n  });\n};\n\nBox.prototype._readDir = function(base, fn, prefix) {\n  prefix = prefix || '';\n\n  var self = this;\n\n  return fs.readdir(base).map(function(path) {\n    return fs.stat(join(base, path)).then(function(stats) {\n      if (stats.isDirectory()) {\n        return self._readDir(join(base, path), fn, prefix + path + '/');\n      }\n\n      return self._checkFileStatus(prefix + path).then(function(file) {\n        return fn(file).thenReturn(file);\n      });\n    });\n  }).catch(function(err) {\n    if (err.cause && err.cause.code === 'ENOENT') return;\n    throw err;\n  }).reduce(function(files, item) {\n    return files.concat(item);\n  }, []);\n};\n\nBox.prototype._checkFileStatus = function(path) {\n  var Cache = this.Cache;\n  var src = join(this.base, path);\n  var ctx = this.context;\n\n  return Cache.compareFile(\n    escapeBackslash(src.substring(ctx.base_dir.length)),\n    function() {\n      return getHash(src);\n    },\n\n    function() {\n      return fs.stat(src);\n    }\n  ).then(function(result) {\n    return {\n      type: result.type,\n      path: path\n    };\n  });\n};\n\nBox.prototype.process = function(callback) {\n  var self = this;\n  var base = this.base;\n  var Cache = this.Cache;\n  var ctx = this.context;\n\n  return fs.stat(base).then(function(stats) {\n    if (!stats.isDirectory()) return;\n\n    // Check existing files in cache\n    var relativeBase = escapeBackslash(base.substring(ctx.base_dir.length));\n    var cacheFiles = Cache.filter(function(item) {\n      return item._id.substring(0, relativeBase.length) === relativeBase;\n    }).map(function(item) {\n      return item._id.substring(relativeBase.length);\n    });\n\n    // Read files from directory\n    return self._readDir(base, function(file) {\n      return self._processFile(file.type, file.path);\n    }).map(function(file) {\n      return file.path;\n    }).then(function(files) {\n      // Handle deleted files\n      return Promise.filter(cacheFiles, function(path) {\n        return !~files.indexOf(path);\n      }).map(function(path) {\n        return self._processFile(File.TYPE_DELETE, path);\n      });\n    });\n  }).catch(function(err) {\n    if (err.cause && err.cause.code !== 'ENOENT') throw err;\n  }).asCallback(callback);\n};\n\nBox.prototype.load = Box.prototype.process;\n\nBox.prototype._processFile = function(type, path) {\n  if (this._processingFiles[path]) {\n    return Promise.resolve();\n  }\n\n  this._processingFiles[path] = true;\n\n  var File = this.File;\n  var base = this.base;\n  var ctx = this.context;\n  var self = this;\n\n  this.emit('processBefore', {\n    type: type,\n    path: path\n  });\n\n  return Promise.reduce(this.processors, function(count, processor) {\n    var params = processor.pattern.match(path);\n    if (!params) return count;\n\n    var file = new File({\n      source: join(base, path),\n      path: path,\n      params: params,\n      type: type\n    });\n\n    return Promise.method(processor.process).call(ctx, file)\n      .thenReturn(count + 1);\n  }, 0).then(function(count) {\n    if (count) {\n      ctx.log.debug('Processed: %s', chalk.magenta(path));\n    }\n\n    self.emit('processAfter', {\n      type: type,\n      path: path\n    });\n  }).catch(function(err) {\n    ctx.log.error({err: err}, 'Process failed: %s', chalk.magenta(path));\n  }).finally(function() {\n    self._processingFiles[path] = false;\n  }).thenReturn(path);\n};\n\nBox.prototype.watch = function(callback) {\n  if (this.isWatching()) {\n    return Promise.reject(new Error('Watcher has already started.')).asCallback(callback);\n  }\n\n  var base = this.base;\n  var self = this;\n\n  function getPath(path) {\n    return escapeBackslash(path.substring(base.length));\n  }\n\n  return this.process().then(function() {\n    return fs.watch(base, self.options);\n  }).then(function(watcher) {\n    self.watcher = watcher;\n\n    watcher.on('add', function(path) {\n      self._processFile(File.TYPE_CREATE, getPath(path));\n    });\n\n    watcher.on('change', function(path) {\n      self._processFile(File.TYPE_UPDATE, getPath(path));\n    });\n\n    watcher.on('unlink', function(path) {\n      self._processFile(File.TYPE_DELETE, getPath(path));\n    });\n\n    watcher.on('addDir', function(path) {\n      var prefix = getPath(path);\n      if (prefix) prefix += '/';\n\n      self._readDir(path, function(file) {\n        return self._processFile(file.type, file.path);\n      }, prefix);\n    });\n  }).asCallback(callback);\n};\n\nBox.prototype.unwatch = function() {\n  if (!this.isWatching()) return;\n\n  this.watcher.close();\n  this.watcher = null;\n};\n\nBox.prototype.isWatching = function() {\n  return Boolean(this.watcher);\n};\n\nmodule.exports = Box;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/box/file.js":"'use strict';\n\nvar fs = require('hexo-fs');\n\nfunction File(data) {\n  this.source = data.source;\n  this.path = data.path;\n  this.params = data.params;\n  this.type = data.type;\n}\n\nFile.prototype.read = function(options, callback) {\n  return fs.readFile(this.source, options).asCallback(callback);\n};\n\nFile.prototype.readSync = function(options) {\n  return fs.readFileSync(this.source, options);\n};\n\nFile.prototype.stat = function(options, callback) {\n  if (!callback && typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  return fs.stat(this.source).asCallback(callback);\n};\n\nFile.prototype.statSync = function(options) {\n  return fs.statSync(this.source);\n};\n\nFile.TYPE_CREATE = 'create';\nFile.TYPE_UPDATE = 'update';\nFile.TYPE_SKIP = 'skip';\nFile.TYPE_DELETE = 'delete';\n\nmodule.exports = File;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/hexo/router.js":"'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\nvar Promise = require('bluebird');\nvar Stream = require('stream');\nvar util = require('util');\nvar Readable = Stream.Readable;\n\nfunction Router() {\n  EventEmitter.call(this);\n\n  this.routes = {};\n}\n\nutil.inherits(Router, EventEmitter);\n\nRouter.format = Router.prototype.format = function(path) {\n  path = path || '';\n  if (typeof path !== 'string') throw new TypeError('path must be a string!');\n\n  path = path\n    .replace(/^\\/+/, '') // Remove prefixed slashes\n    .replace(/\\\\/g, '/') // Replaces all backslashes\n    .replace(/\\?.*$/, ''); // Remove query string\n\n  // Appends `index.html` to the path with trailing slash\n  if (!path || path[path.length - 1] === '/') {\n    path += 'index.html';\n  }\n\n  return path;\n};\n\nRouter.prototype.list = function() {\n  var routes = this.routes;\n  var keys = Object.keys(routes);\n  var arr = [];\n  var key;\n\n  for (var i = 0, len = keys.length; i < len; i++) {\n    key = keys[i];\n    if (routes[key]) arr.push(key);\n  }\n\n  return arr;\n};\n\nRouter.prototype.get = function(path) {\n  if (typeof path !== 'string') throw new TypeError('path must be a string!');\n\n  var data = this.routes[this.format(path)];\n  if (data == null) return;\n\n  return new RouteStream(data);\n};\n\nRouter.prototype.isModified = function(path) {\n  if (typeof path !== 'string') throw new TypeError('path must be a string!');\n\n  var data = this.routes[this.format(path)];\n  return data ? data.modified : false;\n};\n\nRouter.prototype.set = function(path, data) {\n  if (typeof path !== 'string') throw new TypeError('path must be a string!');\n  if (data == null) throw new TypeError('data is required!');\n\n  var obj;\n\n  if (typeof data === 'object' && data.data != null) {\n    obj = data;\n  } else {\n    obj = {\n      data: data,\n      modified: true\n    };\n  }\n\n  if (typeof obj.data === 'function') {\n    if (obj.data.length) {\n      obj.data = Promise.promisify(obj.data);\n    } else {\n      obj.data = Promise.method(obj.data);\n    }\n  }\n\n  path = this.format(path);\n\n  this.routes[path] = {\n    data: obj.data,\n    modified: obj.modified == null ? true : obj.modified\n  };\n\n  this.emit('update', path);\n\n  return this;\n};\n\nRouter.prototype.remove = function(path) {\n  if (typeof path !== 'string') throw new TypeError('path must be a string!');\n  path = this.format(path);\n\n  this.routes[path] = null;\n  this.emit('remove', path);\n\n  return this;\n};\n\nfunction RouteStream(data) {\n  Readable.call(this, {objectMode: true});\n\n  this._data = data.data;\n  this._ended = false;\n  this.modified = data.modified;\n}\n\nutil.inherits(RouteStream, Readable);\n\nRouteStream.prototype._read = function() {\n  var data = this._data;\n\n  if (typeof data !== 'function') {\n    this.push(data);\n    this.push(null);\n    return;\n  }\n\n  // Don't read it twice!\n  if (this._ended) return false;\n  this._ended = true;\n\n  var self = this;\n\n  data().then(function(data) {\n    if (data instanceof Stream && data.readable) {\n      data.on('data', function(d) {\n        self.push(d);\n      });\n\n      data.on('end', function() {\n        self.push(null);\n      });\n\n      data.on('error', function(err) {\n        self.emit('error', err);\n      });\n    } else if (data instanceof Buffer || typeof data === 'string') {\n      self.push(data);\n      self.push(null);\n    } else if (typeof data === 'object') {\n      self.push(JSON.stringify(data));\n      self.push(null);\n    } else {\n      self.push(null);\n    }\n  }).catch(function(err) {\n    self.emit('error', err);\n  });\n};\n\nmodule.exports = Router;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/theme/index.js":"'use strict';\n\nvar pathFn = require('path');\nvar util = require('util');\nvar Box = require('../box');\nvar View = require('./view');\nvar I18n = require('hexo-i18n');\nvar _ = require('lodash');\n\nfunction Theme(ctx) {\n  Box.call(this, ctx, ctx.theme_dir);\n\n  this.config = {};\n\n  this.views = {};\n\n  this.processors = [\n    require('./processors/config'),\n    require('./processors/i18n'),\n    require('./processors/source'),\n    require('./processors/view')\n  ];\n\n  var languages = ctx.config.language;\n\n  if (!Array.isArray(languages)) {\n    languages = [languages];\n  }\n\n  languages.push('default');\n\n  this.i18n = new I18n({\n    languages: _(languages).compact().uniq().value()\n  });\n\n  var _View = this.View = function(path, data) {\n    View.call(this, path, data);\n  };\n\n  util.inherits(_View, View);\n\n  _View.prototype._theme = this;\n  _View.prototype._render = ctx.render;\n  _View.prototype._helper = ctx.extend.helper;\n}\n\nutil.inherits(Theme, Box);\n\nTheme.prototype.getView = function(path) {\n  // Replace backslashes on Windows\n  path = path.replace(/\\\\/g, '/');\n\n  var extname = pathFn.extname(path);\n  var name = path.substring(0, path.length - extname.length);\n  var views = this.views[name];\n\n  if (!views) return;\n\n  if (extname) {\n    return views[extname];\n  }\n\n  return views[Object.keys(views)[0]];\n};\n\nTheme.prototype.setView = function(path, data) {\n  var extname = pathFn.extname(path);\n  var name = path.substring(0, path.length - extname.length);\n  var views = this.views[name] = this.views[name] || {};\n\n  views[extname] = new this.View(path, data);\n};\n\nTheme.prototype.removeView = function(path) {\n  var extname = pathFn.extname(path);\n  var name = path.substring(0, path.length - extname.length);\n  var views = this.views[name];\n\n  if (!views) return;\n\n  delete views[extname];\n};\n\nmodule.exports = Theme;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/theme/view.js":"'use strict';\n\nvar pathFn = require('path');\nvar _ = require('lodash');\nvar yfm = require('hexo-front-matter');\nvar Promise = require('bluebird');\n\nfunction View(path, data) {\n  this.path = path;\n  this.source = pathFn.join(this._theme.base, 'layout', path);\n  this.data = typeof data === 'string' ? yfm(data) : data;\n\n  this._precompile();\n}\n\nView.prototype.render = function(options, callback) {\n  if (!callback && typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  var data = this.data;\n  var layout = data.hasOwnProperty('layout') ? data.layout : options.layout;\n  var locals = this._buildLocals(options);\n  var self = this;\n\n  return this._compiled(this._bindHelpers(locals)).then(function(result) {\n    if (result == null || !layout) return result;\n\n    var layoutView = self._resolveLayout(layout);\n    if (!layoutView) return result;\n\n    var layoutLocals = _.assign({}, locals, {\n      body: result,\n      layout: false\n    });\n\n    return layoutView.render(layoutLocals, callback);\n  }).asCallback(callback);\n};\n\nView.prototype.renderSync = function(options) {\n  options = options || {};\n\n  var data = this.data;\n  var layout = data.hasOwnProperty('layout') ? data.layout : options.layout;\n  var locals = this._buildLocals(options);\n  var result = this._compiledSync(this._bindHelpers(locals));\n\n  if (result == null || !layout) return result;\n\n  var layoutView = this._resolveLayout(layout);\n  if (!layoutView) return result;\n\n  var layoutLocals = _.assign({}, locals, {\n    body: result,\n    layout: false\n  });\n\n  return layoutView.renderSync(layoutLocals);\n};\n\nView.prototype._buildLocals = function(locals) {\n  return _.assignIn({}, locals, _.omit(this.data, ['layout', '_content']), {\n    filename: this.source\n  });\n};\n\nView.prototype._bindHelpers = function(locals) {\n  var helpers = this._helper.list();\n  var keys = Object.keys(helpers);\n  var key = '';\n\n  for (var i = 0, len = keys.length; i < len; i++) {\n    key = keys[i];\n    locals[key] = _.bind(helpers[key], locals);\n  }\n\n  return locals;\n};\n\nView.prototype._resolveLayout = function(name) {\n  // Relative path\n  var layoutPath = pathFn.join(pathFn.dirname(this.path), name);\n  var layoutView = this._theme.getView(layoutPath);\n\n  if (layoutView && layoutView.source !== this.source) return layoutView;\n\n  // Absolute path\n  layoutView = this._theme.getView(name);\n  if (layoutView && layoutView.source !== this.source) return layoutView;\n};\n\nView.prototype._precompile = function() {\n  var render = this._render;\n  var ctx = render.context;\n  var ext = pathFn.extname(this.path);\n  var renderer = render.getRenderer(ext);\n  var data = {\n    path: this.source,\n    text: this.data._content\n  };\n\n  function buildFilterArguments(result) {\n    var output = render.getOutput(ext) || ext;\n    return [\n      'after_render:' + output,\n      result,\n      {\n        context: ctx,\n        args: [data]\n      }\n    ];\n  }\n\n  if (renderer && typeof renderer.compile === 'function') {\n    var compiled = renderer.compile(data);\n\n    this._compiledSync = function(locals) {\n      var result = compiled(locals);\n      return ctx.execFilterSync.apply(ctx, buildFilterArguments(result));\n    };\n\n    this._compiled = function(locals) {\n      return Promise.resolve(compiled(locals))\n        .then(function(result) {\n          return ctx.execFilter.apply(ctx, buildFilterArguments(result));\n        });\n    };\n  } else {\n    this._compiledSync = function(locals) {\n      return render.renderSync(data, locals);\n    };\n\n    this._compiled = function(locals) {\n      return render.render(data, locals);\n    };\n  }\n};\n\nmodule.exports = View;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/hexo/locals.js":"'use strict';\n\nfunction Locals() {\n  this.cache = {};\n  this.getters = {};\n}\n\nLocals.prototype.get = function(name) {\n  if (typeof name !== 'string') throw new TypeError('name must be a string!');\n\n  var cache = this.cache[name];\n\n  if (cache == null) {\n    var getter = this.getters[name];\n    if (!getter) return;\n\n    cache = this.cache[name] = getter();\n  }\n\n  return cache;\n};\n\nLocals.prototype.set = function(name, value) {\n  if (typeof name !== 'string') throw new TypeError('name must be a string!');\n  if (value == null) throw new TypeError('value is required!');\n\n  var getter;\n\n  if (typeof value === 'function') {\n    getter = value;\n  } else {\n    getter = function() {\n      return value;\n    };\n  }\n\n  this.getters[name] = getter;\n  this.cache[name] = null;\n\n  return this;\n};\n\nLocals.prototype.remove = function(name) {\n  if (typeof name !== 'string') throw new TypeError('name must be a string!');\n\n  this.getters[name] = null;\n  this.cache[name] = null;\n\n  return this;\n};\n\nLocals.prototype.invalidate = function() {\n  this.cache = {};\n\n  return this;\n};\n\nLocals.prototype.toObject = function() {\n  var result = {};\n  var keys = Object.keys(this.getters);\n  var key = '';\n  var item;\n\n  for (var i = 0, len = keys.length; i < len; i++) {\n    key = keys[i];\n    item = this.get(key);\n\n    if (item != null) result[key] = item;\n  }\n\n  return result;\n};\n\nmodule.exports = Locals;\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/hexo/default_config.js":"'use strict';\n\nmodule.exports = {\n  // Site\n  title: 'Hexo',\n  subtitle: '',\n  description: '',\n  author: 'John Doe',\n  language: '',\n  timezone: '',\n  // URL\n  url: 'http://yoursite.com',\n  root: '/',\n  permalink: ':year/:month/:day/:title/',\n  permalink_defaults: {},\n  // Directory\n  source_dir: 'source',\n  public_dir: 'public',\n  tag_dir: 'tags',\n  archive_dir: 'archives',\n  category_dir: 'categories',\n  code_dir: 'downloads/code',\n  i18n_dir: ':lang',\n  skip_render: [],\n  // Writing\n  new_post_name: ':title.md',\n  default_layout: 'post',\n  titlecase: false,\n  external_link: true,\n  filename_case: 0,\n  render_drafts: false,\n  post_asset_folder: false,\n  relative_link: false,\n  future: true,\n  highlight: {\n    enable: true,\n    auto_detect: false,\n    line_number: true,\n    tab_replace: ''\n  },\n  // Category & Tag\n  default_category: 'uncategorized',\n  category_map: {},\n  tag_map: {},\n  // Date / Time format\n  date_format: 'YYYY-MM-DD',\n  time_format: 'HH:mm:ss',\n  // Pagination\n  per_page: 10,\n  pagination_dir: 'page',\n  // Extensions\n  theme: 'landscape',\n  // Deployment\n  deploy: {}\n};\n","/home/travis/build/npmtest/node-npmtest-hexo/hexo/lib/hexo/load_database.js":"'use strict';\n\nvar fs = require('hexo-fs');\nvar Promise = require('bluebird');\n\nmodule.exports = function(ctx) {\n  if (ctx._dbLoaded) return Promise.resolve();\n\n  var db = ctx.database;\n  var path = db.options.path;\n  var log = ctx.log;\n\n  return fs.exists(path).then(function(exist) {\n    if (!exist) return;\n\n    log.debug('Loading database.');\n    return db.load();\n  }).then(function() {\n    ctx._dbLoaded = true;\n  }).catch(function() {\n    log.error('Database load failed. Deleting database.');\n    return fs.unlink(path);\n  });\n};\n"}